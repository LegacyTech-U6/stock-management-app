// src/stores/authStore.js
import { defineStore } from 'pinia'
import axios from 'axios'

const API_URL = import.meta.env.VITE_API_URL

export const useAuthStore = defineStore('auth', {
  state: () => ({
    user: null,
    token: localStorage.getItem('token') || null, // r√©cup√®re le token stock√© au reload
    isLoading: false,
    error: null,
    successMessage: null,
  }),
  actions: {
    /**
     * Inscription utilisateur
     */
    async register(username, Last_name, email, telephone, password) {
      this.isLoading = true
      this.error = null
      this.successMessage = null

      try {
        const res = await axios.post(`${API_URL}/auth/register`, {
          username,
          Last_name,
          email,
          telephone,
          password,
        })

        // ‚ö†Ô∏è backend ne renvoie que { message }
        this.successMessage = res.data.message || 'Inscription r√©ussie üéâ'
      } catch (err) {
        this.error = err.response?.data?.message || "Erreur d'inscription ‚ùå"
      } finally {
        this.isLoading = false
      }
    },

    /**
     * Connexion utilisateur
     */
    async login(email, password) {
      this.isLoading = true
      this.error = null

      try {
        const res = await axios.post(`${API_URL}/auth/login`, {
          email,
          password,
        })

        // ‚úÖ Ton backend renvoie { token, message }
        this.token = res.data.token
        localStorage.setItem('token', this.token)

        // ‚ö†Ô∏è Pas de user dans la r√©ponse ‚Üí il faudra utiliser getAccount
        await this.getAccount()
      } catch (err) {
        this.error = err.response?.data?.message || 'Erreur de connexion ‚ùå'
        this.user = null
        this.token = null
      } finally {
        this.isLoading = false
      }
    },

    /**
     * R√©cup√©rer les infos utilisateur connect√©
     */
    async getAccount() {
      if (!this.token) return

      try {
        const res = await axios.get(`${API_URL}/auth/profile`, {
          headers: { Authorization: `Bearer ${this.token}` },
        })
        this.user = res.data
      } catch (err) {
        this.error = err.response?.data?.message || 'Impossible de r√©cup√©rer le compte ‚ùå'
        this.user = null
      }
    },

    /**
     * D√©connexion utilisateur
     */
    logout() {
      this.user = null
      this.token = null
      localStorage.removeItem('token')
    },

    /**
     * Mot de passe oubli√©
     */
    async forgotPassword(email) {
      this.isLoading = true
      this.error = null
      this.successMessage = null

      try {
        const res = await axios.post(`${API_URL}/auth/forgot-password`, { email })
        this.successMessage = res.data.message || 'Lien envoy√© üì©'
      } catch (err) {
        this.error = err.response?.data?.message || 'Erreur lors de la demande ‚ùå'
      } finally {
        this.isLoading = false
      }
    },

    /**
     * R√©initialiser le mot de passe
     */
    async resetPassword(token, newPassword) {
      this.isLoading = true
      this.error = null

      try {
        const res = await axios.post(`${API_URL}/auth/reset-password`, {
          token,
          newPassword,
        })
        this.successMessage = res.data.message
      } catch (err) {
        this.error = err.response?.data?.error || 'Erreur r√©initialisation ‚ùå'
      } finally {
        this.isLoading = false
      }
    },

    /**
     * Changer le mot de passe (utilisateur connect√©)
     */
    async changePassword(oldPassword, newPassword) {
      this.isLoading = true
      this.error = null

      try {
        const res = await axios.post(
          `${API_URL}/auth/change-password`,
          { oldPassword, newPassword },
          { headers: { Authorization: `Bearer ${this.token}` } },
        )
        this.successMessage = res.data.message
      } catch (err) {
        this.error = err.response?.data?.message || 'Erreur changement mot de passe ‚ùå'
      } finally {
        this.isLoading = false
      }
    },
    /**
     * V√©rification du compte par email
     */
    async verifyEmail(token) {
      this.isLoading = true
      this.error = null
      this.successMessage = null

      try {
        const res = await axios.get(`${API_URL}/auth/activate/${token}`)
        this.successMessage = res.data.message || 'Compte activ√© avec succ√®s üéâ'
      } catch (err) {
        this.error = err.response?.data?.message || 'Lien invalide ou expir√© ‚ùå'
      } finally {
        this.isLoading = false
      }
    },
    // src/stores/authStore.js
    async updateProfile(updatedData) {
      this.isLoading = true
      this.error = null
      this.successMessage = null

      try {
        const res = await axios.put(`${API_URL}/auth/update-profile`, updatedData, {
          headers: { Authorization: `Bearer ${this.token}` },
        })

        this.user = res.data.user || res.data // selon ta r√©ponse backend
        this.successMessage = res.data.message || 'Profil mis √† jour ‚úÖ'
      } catch (err) {
        this.error = err.response?.data?.message || 'Erreur de mise √† jour ‚ùå'
      } finally {
        this.isLoading = false
      }
    },
  },
})
